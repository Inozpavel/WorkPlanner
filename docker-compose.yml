version: "2.1"

services:

  postgres_db:
    image: library/postgres:latest
    restart: always
    environment:
      - POSTGRES_PASSWORD=postgres
      - PGDATA=/postgres_data
      - TZ=Europe/Moscow
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      timeout: 4s
      interval: 1s
      retries: 30

  identity.api:
    image: inozpavel/workplanneridentity
    restart: always
    environment:
      - TZ=Europe/Moscow
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings:Identity=Host=postgres_db;Port=5432;Database=Identity;Username=postgres;Password=postgres
      - SwaggerApp:Secret=SwaggerAppSecret
      - SwaggerApp:Origin=http://localhost:8000
      - Gateway:Origin=http://localhost:5000
      - IssuerUri=identity.api
    depends_on:
      postgres_db:
        condition: service_healthy
    ports:
      - "9000:80"

  tasks.api:
    image: inozpavel/workplannertasksapi
    restart: always
    environment:
      - TZ=Europe/Moscow
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings:TasksDb=Host=postgres_db;Port=5432;Database=Stores;Username=postgres;Password=postgres
      - IdentityServer:SwaggerAppSecret=SwaggerAppSecret
      - IdentityServer:Authority=http://identity.api
      - IdentityServer:TokenUrl=http://localhost:9000/connect/token
    ports:
      - "8000:80"
    depends_on:
      postgres_db:
        condition: service_healthy
      identity.api:
        condition: service_started

  gateway:
   image: inozpavel/workplannergateway
   restart: always
   environment:
     - TZ=Europe/Moscow
     - ASPNETCORE_ENVIRONMENT=Production
     - IdentityServer:Authority=http://identity.api
     - IdentityServer:TokenUrl=http://localhost:9000/connect/token
   ports:
     - "5000:80"
   depends_on:
     - identity.api
     - tasks.api